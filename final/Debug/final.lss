
final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00800060  00000b80  00000c14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  008000b8  008000b8  00000c6c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c6c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f46  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000827  00000000  00000000  00002d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ff1  00000000  00000000  00003555  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b4  00000000  00000000  00004548  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000510  00000000  00000000  000047fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001513  00000000  00000000  00004d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000621f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 af 04 	jmp	0x95e	; 0x95e <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e8       	ldi	r30, 0x80	; 128
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3b       	cpi	r26, 0xB8	; 184
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 eb       	ldi	r26, 0xB8	; 184
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3c       	cpi	r26, 0xCC	; 204
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 03 	call	0x692	; 0x692 <main>
  8a:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pinChange>:

void key_init(void);						//initialize keypad

void key_init(void)
{
	DDRC = 0x0F;			//assign rows bits PA0-PA3 as outputs and columns bits PA4-PA7 as inputs
  92:	67 2b       	or	r22, r23
  94:	09 f0       	breq	.+2      	; 0x98 <pinChange+0x6>
  96:	9f c0       	rjmp	.+318    	; 0x1d6 <pinChange+0x144>
  98:	00 97       	sbiw	r24, 0x00	; 0
  9a:	11 f4       	brne	.+4      	; 0xa0 <pinChange+0xe>
  9c:	d8 98       	cbi	0x1b, 0	; 27
  9e:	08 95       	ret
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	91 05       	cpc	r25, r1
  a4:	11 f4       	brne	.+4      	; 0xaa <pinChange+0x18>
  a6:	d9 98       	cbi	0x1b, 1	; 27
  a8:	08 95       	ret
  aa:	82 30       	cpi	r24, 0x02	; 2
  ac:	91 05       	cpc	r25, r1
  ae:	11 f4       	brne	.+4      	; 0xb4 <pinChange+0x22>
  b0:	da 98       	cbi	0x1b, 2	; 27
  b2:	08 95       	ret
  b4:	83 30       	cpi	r24, 0x03	; 3
  b6:	91 05       	cpc	r25, r1
  b8:	11 f4       	brne	.+4      	; 0xbe <pinChange+0x2c>
  ba:	db 98       	cbi	0x1b, 3	; 27
  bc:	08 95       	ret
  be:	84 30       	cpi	r24, 0x04	; 4
  c0:	91 05       	cpc	r25, r1
  c2:	11 f4       	brne	.+4      	; 0xc8 <pinChange+0x36>
  c4:	dc 98       	cbi	0x1b, 4	; 27
  c6:	08 95       	ret
  c8:	85 30       	cpi	r24, 0x05	; 5
  ca:	91 05       	cpc	r25, r1
  cc:	11 f4       	brne	.+4      	; 0xd2 <pinChange+0x40>
  ce:	dd 98       	cbi	0x1b, 5	; 27
  d0:	08 95       	ret
  d2:	86 30       	cpi	r24, 0x06	; 6
  d4:	91 05       	cpc	r25, r1
  d6:	11 f4       	brne	.+4      	; 0xdc <pinChange+0x4a>
  d8:	de 98       	cbi	0x1b, 6	; 27
  da:	08 95       	ret
  dc:	87 30       	cpi	r24, 0x07	; 7
  de:	91 05       	cpc	r25, r1
  e0:	11 f4       	brne	.+4      	; 0xe6 <pinChange+0x54>
  e2:	df 98       	cbi	0x1b, 7	; 27
  e4:	08 95       	ret
  e6:	8a 30       	cpi	r24, 0x0A	; 10
  e8:	91 05       	cpc	r25, r1
  ea:	11 f4       	brne	.+4      	; 0xf0 <pinChange+0x5e>
  ec:	c0 98       	cbi	0x18, 0	; 24
  ee:	08 95       	ret
  f0:	8b 30       	cpi	r24, 0x0B	; 11
  f2:	91 05       	cpc	r25, r1
  f4:	11 f4       	brne	.+4      	; 0xfa <pinChange+0x68>
  f6:	c1 98       	cbi	0x18, 1	; 24
  f8:	08 95       	ret
  fa:	8c 30       	cpi	r24, 0x0C	; 12
  fc:	91 05       	cpc	r25, r1
  fe:	11 f4       	brne	.+4      	; 0x104 <pinChange+0x72>
 100:	c2 98       	cbi	0x18, 2	; 24
 102:	08 95       	ret
 104:	8d 30       	cpi	r24, 0x0D	; 13
 106:	91 05       	cpc	r25, r1
 108:	11 f4       	brne	.+4      	; 0x10e <pinChange+0x7c>
 10a:	c3 98       	cbi	0x18, 3	; 24
 10c:	08 95       	ret
 10e:	8e 30       	cpi	r24, 0x0E	; 14
 110:	91 05       	cpc	r25, r1
 112:	11 f4       	brne	.+4      	; 0x118 <pinChange+0x86>
 114:	c4 98       	cbi	0x18, 4	; 24
 116:	08 95       	ret
 118:	8f 30       	cpi	r24, 0x0F	; 15
 11a:	91 05       	cpc	r25, r1
 11c:	11 f4       	brne	.+4      	; 0x122 <pinChange+0x90>
 11e:	c5 98       	cbi	0x18, 5	; 24
 120:	08 95       	ret
 122:	80 31       	cpi	r24, 0x10	; 16
 124:	91 05       	cpc	r25, r1
 126:	11 f4       	brne	.+4      	; 0x12c <pinChange+0x9a>
 128:	c6 98       	cbi	0x18, 6	; 24
 12a:	08 95       	ret
 12c:	81 31       	cpi	r24, 0x11	; 17
 12e:	91 05       	cpc	r25, r1
 130:	11 f4       	brne	.+4      	; 0x136 <pinChange+0xa4>
 132:	c7 98       	cbi	0x18, 7	; 24
 134:	08 95       	ret
 136:	84 31       	cpi	r24, 0x14	; 20
 138:	91 05       	cpc	r25, r1
 13a:	11 f4       	brne	.+4      	; 0x140 <pinChange+0xae>
 13c:	a8 98       	cbi	0x15, 0	; 21
 13e:	08 95       	ret
 140:	85 31       	cpi	r24, 0x15	; 21
 142:	91 05       	cpc	r25, r1
 144:	11 f4       	brne	.+4      	; 0x14a <pinChange+0xb8>
 146:	a9 98       	cbi	0x15, 1	; 21
 148:	08 95       	ret
 14a:	86 31       	cpi	r24, 0x16	; 22
 14c:	91 05       	cpc	r25, r1
 14e:	11 f4       	brne	.+4      	; 0x154 <pinChange+0xc2>
 150:	aa 98       	cbi	0x15, 2	; 21
 152:	08 95       	ret
 154:	87 31       	cpi	r24, 0x17	; 23
 156:	91 05       	cpc	r25, r1
 158:	11 f4       	brne	.+4      	; 0x15e <pinChange+0xcc>
 15a:	ab 98       	cbi	0x15, 3	; 21
 15c:	08 95       	ret
 15e:	88 31       	cpi	r24, 0x18	; 24
 160:	91 05       	cpc	r25, r1
 162:	11 f4       	brne	.+4      	; 0x168 <pinChange+0xd6>
 164:	ac 98       	cbi	0x15, 4	; 21
 166:	08 95       	ret
 168:	89 31       	cpi	r24, 0x19	; 25
 16a:	91 05       	cpc	r25, r1
 16c:	11 f4       	brne	.+4      	; 0x172 <pinChange+0xe0>
 16e:	ad 98       	cbi	0x15, 5	; 21
 170:	08 95       	ret
 172:	8a 31       	cpi	r24, 0x1A	; 26
 174:	91 05       	cpc	r25, r1
 176:	11 f4       	brne	.+4      	; 0x17c <pinChange+0xea>
 178:	ae 98       	cbi	0x15, 6	; 21
 17a:	08 95       	ret
 17c:	8b 31       	cpi	r24, 0x1B	; 27
 17e:	91 05       	cpc	r25, r1
 180:	11 f4       	brne	.+4      	; 0x186 <pinChange+0xf4>
 182:	af 98       	cbi	0x15, 7	; 21
 184:	08 95       	ret
 186:	8e 31       	cpi	r24, 0x1E	; 30
 188:	91 05       	cpc	r25, r1
 18a:	11 f4       	brne	.+4      	; 0x190 <pinChange+0xfe>
 18c:	90 98       	cbi	0x12, 0	; 18
 18e:	08 95       	ret
 190:	8f 31       	cpi	r24, 0x1F	; 31
 192:	91 05       	cpc	r25, r1
 194:	11 f4       	brne	.+4      	; 0x19a <pinChange+0x108>
 196:	91 98       	cbi	0x12, 1	; 18
 198:	08 95       	ret
 19a:	80 32       	cpi	r24, 0x20	; 32
 19c:	91 05       	cpc	r25, r1
 19e:	11 f4       	brne	.+4      	; 0x1a4 <pinChange+0x112>
 1a0:	92 98       	cbi	0x12, 2	; 18
 1a2:	08 95       	ret
 1a4:	81 32       	cpi	r24, 0x21	; 33
 1a6:	91 05       	cpc	r25, r1
 1a8:	11 f4       	brne	.+4      	; 0x1ae <pinChange+0x11c>
 1aa:	93 98       	cbi	0x12, 3	; 18
 1ac:	08 95       	ret
 1ae:	82 32       	cpi	r24, 0x22	; 34
 1b0:	91 05       	cpc	r25, r1
 1b2:	11 f4       	brne	.+4      	; 0x1b8 <pinChange+0x126>
 1b4:	94 98       	cbi	0x12, 4	; 18
 1b6:	08 95       	ret
 1b8:	83 32       	cpi	r24, 0x23	; 35
 1ba:	91 05       	cpc	r25, r1
 1bc:	11 f4       	brne	.+4      	; 0x1c2 <pinChange+0x130>
 1be:	95 98       	cbi	0x12, 5	; 18
 1c0:	08 95       	ret
 1c2:	84 32       	cpi	r24, 0x24	; 36
 1c4:	91 05       	cpc	r25, r1
 1c6:	11 f4       	brne	.+4      	; 0x1cc <pinChange+0x13a>
 1c8:	96 98       	cbi	0x12, 6	; 18
 1ca:	08 95       	ret
 1cc:	85 97       	sbiw	r24, 0x25	; 37
 1ce:	09 f0       	breq	.+2      	; 0x1d2 <pinChange+0x140>
 1d0:	9f c0       	rjmp	.+318    	; 0x310 <pinChange+0x27e>
 1d2:	97 98       	cbi	0x12, 7	; 18
 1d4:	08 95       	ret
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	11 f4       	brne	.+4      	; 0x1de <pinChange+0x14c>
 1da:	d8 9a       	sbi	0x1b, 0	; 27
 1dc:	08 95       	ret
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	91 05       	cpc	r25, r1
 1e2:	11 f4       	brne	.+4      	; 0x1e8 <pinChange+0x156>
 1e4:	d9 9a       	sbi	0x1b, 1	; 27
 1e6:	08 95       	ret
 1e8:	82 30       	cpi	r24, 0x02	; 2
 1ea:	91 05       	cpc	r25, r1
 1ec:	11 f4       	brne	.+4      	; 0x1f2 <pinChange+0x160>
 1ee:	da 9a       	sbi	0x1b, 2	; 27
 1f0:	08 95       	ret
 1f2:	83 30       	cpi	r24, 0x03	; 3
 1f4:	91 05       	cpc	r25, r1
 1f6:	11 f4       	brne	.+4      	; 0x1fc <pinChange+0x16a>
 1f8:	db 9a       	sbi	0x1b, 3	; 27
 1fa:	08 95       	ret
 1fc:	84 30       	cpi	r24, 0x04	; 4
 1fe:	91 05       	cpc	r25, r1
 200:	11 f4       	brne	.+4      	; 0x206 <pinChange+0x174>
 202:	dc 9a       	sbi	0x1b, 4	; 27
 204:	08 95       	ret
 206:	85 30       	cpi	r24, 0x05	; 5
 208:	91 05       	cpc	r25, r1
 20a:	11 f4       	brne	.+4      	; 0x210 <pinChange+0x17e>
 20c:	dd 9a       	sbi	0x1b, 5	; 27
 20e:	08 95       	ret
 210:	86 30       	cpi	r24, 0x06	; 6
 212:	91 05       	cpc	r25, r1
 214:	11 f4       	brne	.+4      	; 0x21a <pinChange+0x188>
 216:	de 9a       	sbi	0x1b, 6	; 27
 218:	08 95       	ret
 21a:	87 30       	cpi	r24, 0x07	; 7
 21c:	91 05       	cpc	r25, r1
 21e:	11 f4       	brne	.+4      	; 0x224 <pinChange+0x192>
 220:	df 9a       	sbi	0x1b, 7	; 27
 222:	08 95       	ret
 224:	8a 30       	cpi	r24, 0x0A	; 10
 226:	91 05       	cpc	r25, r1
 228:	11 f4       	brne	.+4      	; 0x22e <pinChange+0x19c>
 22a:	c0 9a       	sbi	0x18, 0	; 24
 22c:	08 95       	ret
 22e:	8b 30       	cpi	r24, 0x0B	; 11
 230:	91 05       	cpc	r25, r1
 232:	11 f4       	brne	.+4      	; 0x238 <pinChange+0x1a6>
 234:	c1 9a       	sbi	0x18, 1	; 24
 236:	08 95       	ret
 238:	8c 30       	cpi	r24, 0x0C	; 12
 23a:	91 05       	cpc	r25, r1
 23c:	11 f4       	brne	.+4      	; 0x242 <pinChange+0x1b0>
 23e:	c2 9a       	sbi	0x18, 2	; 24
 240:	08 95       	ret
 242:	8d 30       	cpi	r24, 0x0D	; 13
 244:	91 05       	cpc	r25, r1
 246:	11 f4       	brne	.+4      	; 0x24c <pinChange+0x1ba>
 248:	c3 9a       	sbi	0x18, 3	; 24
 24a:	08 95       	ret
 24c:	8e 30       	cpi	r24, 0x0E	; 14
 24e:	91 05       	cpc	r25, r1
 250:	11 f4       	brne	.+4      	; 0x256 <pinChange+0x1c4>
 252:	c4 9a       	sbi	0x18, 4	; 24
 254:	08 95       	ret
 256:	8f 30       	cpi	r24, 0x0F	; 15
 258:	91 05       	cpc	r25, r1
 25a:	11 f4       	brne	.+4      	; 0x260 <pinChange+0x1ce>
 25c:	c5 9a       	sbi	0x18, 5	; 24
 25e:	08 95       	ret
 260:	80 31       	cpi	r24, 0x10	; 16
 262:	91 05       	cpc	r25, r1
 264:	11 f4       	brne	.+4      	; 0x26a <pinChange+0x1d8>
 266:	c6 9a       	sbi	0x18, 6	; 24
 268:	08 95       	ret
 26a:	81 31       	cpi	r24, 0x11	; 17
 26c:	91 05       	cpc	r25, r1
 26e:	11 f4       	brne	.+4      	; 0x274 <pinChange+0x1e2>
 270:	c7 9a       	sbi	0x18, 7	; 24
 272:	08 95       	ret
 274:	84 31       	cpi	r24, 0x14	; 20
 276:	91 05       	cpc	r25, r1
 278:	11 f4       	brne	.+4      	; 0x27e <pinChange+0x1ec>
 27a:	a8 9a       	sbi	0x15, 0	; 21
 27c:	08 95       	ret
 27e:	85 31       	cpi	r24, 0x15	; 21
 280:	91 05       	cpc	r25, r1
 282:	11 f4       	brne	.+4      	; 0x288 <pinChange+0x1f6>
 284:	a9 9a       	sbi	0x15, 1	; 21
 286:	08 95       	ret
 288:	86 31       	cpi	r24, 0x16	; 22
 28a:	91 05       	cpc	r25, r1
 28c:	11 f4       	brne	.+4      	; 0x292 <pinChange+0x200>
 28e:	aa 9a       	sbi	0x15, 2	; 21
 290:	08 95       	ret
 292:	87 31       	cpi	r24, 0x17	; 23
 294:	91 05       	cpc	r25, r1
 296:	11 f4       	brne	.+4      	; 0x29c <pinChange+0x20a>
 298:	ab 9a       	sbi	0x15, 3	; 21
 29a:	08 95       	ret
 29c:	88 31       	cpi	r24, 0x18	; 24
 29e:	91 05       	cpc	r25, r1
 2a0:	11 f4       	brne	.+4      	; 0x2a6 <pinChange+0x214>
 2a2:	ac 9a       	sbi	0x15, 4	; 21
 2a4:	08 95       	ret
 2a6:	89 31       	cpi	r24, 0x19	; 25
 2a8:	91 05       	cpc	r25, r1
 2aa:	11 f4       	brne	.+4      	; 0x2b0 <pinChange+0x21e>
 2ac:	ad 9a       	sbi	0x15, 5	; 21
 2ae:	08 95       	ret
 2b0:	8a 31       	cpi	r24, 0x1A	; 26
 2b2:	91 05       	cpc	r25, r1
 2b4:	11 f4       	brne	.+4      	; 0x2ba <pinChange+0x228>
 2b6:	ae 9a       	sbi	0x15, 6	; 21
 2b8:	08 95       	ret
 2ba:	8b 31       	cpi	r24, 0x1B	; 27
 2bc:	91 05       	cpc	r25, r1
 2be:	11 f4       	brne	.+4      	; 0x2c4 <pinChange+0x232>
 2c0:	af 9a       	sbi	0x15, 7	; 21
 2c2:	08 95       	ret
 2c4:	8e 31       	cpi	r24, 0x1E	; 30
 2c6:	91 05       	cpc	r25, r1
 2c8:	11 f4       	brne	.+4      	; 0x2ce <pinChange+0x23c>
 2ca:	90 9a       	sbi	0x12, 0	; 18
 2cc:	08 95       	ret
 2ce:	8f 31       	cpi	r24, 0x1F	; 31
 2d0:	91 05       	cpc	r25, r1
 2d2:	11 f4       	brne	.+4      	; 0x2d8 <pinChange+0x246>
 2d4:	91 9a       	sbi	0x12, 1	; 18
 2d6:	08 95       	ret
 2d8:	80 32       	cpi	r24, 0x20	; 32
 2da:	91 05       	cpc	r25, r1
 2dc:	11 f4       	brne	.+4      	; 0x2e2 <pinChange+0x250>
 2de:	92 9a       	sbi	0x12, 2	; 18
 2e0:	08 95       	ret
 2e2:	81 32       	cpi	r24, 0x21	; 33
 2e4:	91 05       	cpc	r25, r1
 2e6:	11 f4       	brne	.+4      	; 0x2ec <pinChange+0x25a>
 2e8:	93 9a       	sbi	0x12, 3	; 18
 2ea:	08 95       	ret
 2ec:	82 32       	cpi	r24, 0x22	; 34
 2ee:	91 05       	cpc	r25, r1
 2f0:	11 f4       	brne	.+4      	; 0x2f6 <pinChange+0x264>
 2f2:	94 9a       	sbi	0x12, 4	; 18
 2f4:	08 95       	ret
 2f6:	83 32       	cpi	r24, 0x23	; 35
 2f8:	91 05       	cpc	r25, r1
 2fa:	11 f4       	brne	.+4      	; 0x300 <pinChange+0x26e>
 2fc:	95 9a       	sbi	0x12, 5	; 18
 2fe:	08 95       	ret
 300:	84 32       	cpi	r24, 0x24	; 36
 302:	91 05       	cpc	r25, r1
 304:	11 f4       	brne	.+4      	; 0x30a <pinChange+0x278>
 306:	96 9a       	sbi	0x12, 6	; 18
 308:	08 95       	ret
 30a:	85 97       	sbiw	r24, 0x25	; 37
 30c:	09 f4       	brne	.+2      	; 0x310 <pinChange+0x27e>
 30e:	97 9a       	sbi	0x12, 7	; 18
 310:	08 95       	ret

00000312 <Lcd4_Port>:
 312:	cf 93       	push	r28
 314:	c8 2f       	mov	r28, r24
 316:	80 ff       	sbrs	r24, 0
 318:	07 c0       	rjmp	.+14     	; 0x328 <Lcd4_Port+0x16>
 31a:	61 e0       	ldi	r22, 0x01	; 1
 31c:	70 e0       	ldi	r23, 0x00	; 0
 31e:	84 e0       	ldi	r24, 0x04	; 4
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 326:	06 c0       	rjmp	.+12     	; 0x334 <Lcd4_Port+0x22>
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	84 e0       	ldi	r24, 0x04	; 4
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 334:	c1 ff       	sbrs	r28, 1
 336:	07 c0       	rjmp	.+14     	; 0x346 <Lcd4_Port+0x34>
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	85 e0       	ldi	r24, 0x05	; 5
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 344:	06 c0       	rjmp	.+12     	; 0x352 <Lcd4_Port+0x40>
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	85 e0       	ldi	r24, 0x05	; 5
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 352:	c2 ff       	sbrs	r28, 2
 354:	07 c0       	rjmp	.+14     	; 0x364 <Lcd4_Port+0x52>
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	70 e0       	ldi	r23, 0x00	; 0
 35a:	86 e0       	ldi	r24, 0x06	; 6
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 362:	06 c0       	rjmp	.+12     	; 0x370 <Lcd4_Port+0x5e>
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	86 e0       	ldi	r24, 0x06	; 6
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 370:	c3 ff       	sbrs	r28, 3
 372:	07 c0       	rjmp	.+14     	; 0x382 <Lcd4_Port+0x70>
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	87 e0       	ldi	r24, 0x07	; 7
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 380:	06 c0       	rjmp	.+12     	; 0x38e <Lcd4_Port+0x7c>
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	87 e0       	ldi	r24, 0x07	; 7
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 38e:	cf 91       	pop	r28
 390:	08 95       	ret

00000392 <Lcd4_Cmd>:
 392:	cf 93       	push	r28
 394:	c8 2f       	mov	r28, r24
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	84 e2       	ldi	r24, 0x24	; 36
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 3a2:	8c 2f       	mov	r24, r28
 3a4:	0e 94 89 01 	call	0x312	; 0x312 <Lcd4_Port>
 3a8:	61 e0       	ldi	r22, 0x01	; 1
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	85 e2       	ldi	r24, 0x25	; 37
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 3b4:	8f e9       	ldi	r24, 0x9F	; 159
 3b6:	9f e0       	ldi	r25, 0x0F	; 15
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <Lcd4_Cmd+0x26>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <Lcd4_Cmd+0x2c>
 3be:	00 00       	nop
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	70 e0       	ldi	r23, 0x00	; 0
 3c4:	85 e2       	ldi	r24, 0x25	; 37
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 3cc:	8f e9       	ldi	r24, 0x9F	; 159
 3ce:	9f e0       	ldi	r25, 0x0F	; 15
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <Lcd4_Cmd+0x3e>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <Lcd4_Cmd+0x44>
 3d6:	00 00       	nop
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <Lcd4_Clear>:
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 3e8:	08 95       	ret

000003ea <Lcd4_Set_Cursor>:
 3ea:	cf 93       	push	r28
 3ec:	c6 2f       	mov	r28, r22
 3ee:	81 30       	cpi	r24, 0x01	; 1
 3f0:	59 f4       	brne	.+22     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3f2:	80 e8       	ldi	r24, 0x80	; 128
 3f4:	86 0f       	add	r24, r22
 3f6:	82 95       	swap	r24
 3f8:	8f 70       	andi	r24, 0x0F	; 15
 3fa:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 3fe:	8c 2f       	mov	r24, r28
 400:	8f 70       	andi	r24, 0x0F	; 15
 402:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 406:	0c c0       	rjmp	.+24     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 408:	82 30       	cpi	r24, 0x02	; 2
 40a:	51 f4       	brne	.+20     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 40c:	80 ec       	ldi	r24, 0xC0	; 192
 40e:	86 0f       	add	r24, r22
 410:	82 95       	swap	r24
 412:	8f 70       	andi	r24, 0x0F	; 15
 414:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 418:	8c 2f       	mov	r24, r28
 41a:	8f 70       	andi	r24, 0x0F	; 15
 41c:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 420:	cf 91       	pop	r28
 422:	08 95       	ret

00000424 <Lcd4_Init>:
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	0e 94 89 01 	call	0x312	; 0x312 <Lcd4_Port>
 42a:	2f ef       	ldi	r18, 0xFF	; 255
 42c:	89 ef       	ldi	r24, 0xF9	; 249
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	21 50       	subi	r18, 0x01	; 1
 432:	80 40       	sbci	r24, 0x00	; 0
 434:	90 40       	sbci	r25, 0x00	; 0
 436:	e1 f7       	brne	.-8      	; 0x430 <Lcd4_Init+0xc>
 438:	00 c0       	rjmp	.+0      	; 0x43a <Lcd4_Init+0x16>
 43a:	00 00       	nop
 43c:	83 e0       	ldi	r24, 0x03	; 3
 43e:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 442:	8f e1       	ldi	r24, 0x1F	; 31
 444:	9e e4       	ldi	r25, 0x4E	; 78
 446:	01 97       	sbiw	r24, 0x01	; 1
 448:	f1 f7       	brne	.-4      	; 0x446 <Lcd4_Init+0x22>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <Lcd4_Init+0x28>
 44c:	00 00       	nop
 44e:	83 e0       	ldi	r24, 0x03	; 3
 450:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 454:	8f ed       	ldi	r24, 0xDF	; 223
 456:	9b ea       	ldi	r25, 0xAB	; 171
 458:	01 97       	sbiw	r24, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <Lcd4_Init+0x34>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <Lcd4_Init+0x3a>
 45e:	00 00       	nop
 460:	83 e0       	ldi	r24, 0x03	; 3
 462:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 466:	82 e0       	ldi	r24, 0x02	; 2
 468:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 46c:	82 e0       	ldi	r24, 0x02	; 2
 46e:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 472:	88 e0       	ldi	r24, 0x08	; 8
 474:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 47e:	8c e0       	ldi	r24, 0x0C	; 12
 480:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 48a:	86 e0       	ldi	r24, 0x06	; 6
 48c:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 490:	08 95       	ret

00000492 <Lcd4_Write_Char>:
 492:	cf 93       	push	r28
 494:	c8 2f       	mov	r28, r24
 496:	61 e0       	ldi	r22, 0x01	; 1
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	84 e2       	ldi	r24, 0x24	; 36
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 4a2:	8c 2f       	mov	r24, r28
 4a4:	82 95       	swap	r24
 4a6:	8f 70       	andi	r24, 0x0F	; 15
 4a8:	0e 94 89 01 	call	0x312	; 0x312 <Lcd4_Port>
 4ac:	61 e0       	ldi	r22, 0x01	; 1
 4ae:	70 e0       	ldi	r23, 0x00	; 0
 4b0:	85 e2       	ldi	r24, 0x25	; 37
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 4b8:	8f e9       	ldi	r24, 0x9F	; 159
 4ba:	9f e0       	ldi	r25, 0x0F	; 15
 4bc:	01 97       	sbiw	r24, 0x01	; 1
 4be:	f1 f7       	brne	.-4      	; 0x4bc <Lcd4_Write_Char+0x2a>
 4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <Lcd4_Write_Char+0x30>
 4c2:	00 00       	nop
 4c4:	60 e0       	ldi	r22, 0x00	; 0
 4c6:	70 e0       	ldi	r23, 0x00	; 0
 4c8:	85 e2       	ldi	r24, 0x25	; 37
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 4d0:	8f e9       	ldi	r24, 0x9F	; 159
 4d2:	9f e0       	ldi	r25, 0x0F	; 15
 4d4:	01 97       	sbiw	r24, 0x01	; 1
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <Lcd4_Write_Char+0x42>
 4d8:	00 c0       	rjmp	.+0      	; 0x4da <Lcd4_Write_Char+0x48>
 4da:	00 00       	nop
 4dc:	8c 2f       	mov	r24, r28
 4de:	8f 70       	andi	r24, 0x0F	; 15
 4e0:	0e 94 89 01 	call	0x312	; 0x312 <Lcd4_Port>
 4e4:	61 e0       	ldi	r22, 0x01	; 1
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	85 e2       	ldi	r24, 0x25	; 37
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 4f0:	8f e9       	ldi	r24, 0x9F	; 159
 4f2:	9f e0       	ldi	r25, 0x0F	; 15
 4f4:	01 97       	sbiw	r24, 0x01	; 1
 4f6:	f1 f7       	brne	.-4      	; 0x4f4 <Lcd4_Write_Char+0x62>
 4f8:	00 c0       	rjmp	.+0      	; 0x4fa <Lcd4_Write_Char+0x68>
 4fa:	00 00       	nop
 4fc:	60 e0       	ldi	r22, 0x00	; 0
 4fe:	70 e0       	ldi	r23, 0x00	; 0
 500:	85 e2       	ldi	r24, 0x25	; 37
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 508:	8f e9       	ldi	r24, 0x9F	; 159
 50a:	9f e0       	ldi	r25, 0x0F	; 15
 50c:	01 97       	sbiw	r24, 0x01	; 1
 50e:	f1 f7       	brne	.-4      	; 0x50c <Lcd4_Write_Char+0x7a>
 510:	00 c0       	rjmp	.+0      	; 0x512 <Lcd4_Write_Char+0x80>
 512:	00 00       	nop
 514:	cf 91       	pop	r28
 516:	08 95       	ret

00000518 <Lcd4_Write_String>:
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	ec 01       	movw	r28, r24
 51e:	88 81       	ld	r24, Y
 520:	88 23       	and	r24, r24
 522:	31 f0       	breq	.+12     	; 0x530 <Lcd4_Write_String+0x18>
 524:	21 96       	adiw	r28, 0x01	; 1
 526:	0e 94 49 02 	call	0x492	; 0x492 <Lcd4_Write_Char>
 52a:	89 91       	ld	r24, Y+
 52c:	81 11       	cpse	r24, r1
 52e:	fb cf       	rjmp	.-10     	; 0x526 <Lcd4_Write_String+0xe>
 530:	df 91       	pop	r29
 532:	cf 91       	pop	r28
 534:	08 95       	ret

00000536 <key_scan>:
{
	unsigned char cnt, key;
	
	
	
	for ( cnt = 0 ; cnt < 4 ; ++cnt )
 536:	80 e0       	ldi	r24, 0x00	; 0
	{
		PORTC = 0XFF;				//first level check rows one by one
 538:	2f ef       	ldi	r18, 0xFF	; 255
 53a:	25 bb       	out	0x15, r18	; 21
		
		if ( cnt == 0 )
 53c:	81 11       	cpse	r24, r1
 53e:	02 c0       	rjmp	.+4      	; 0x544 <key_scan+0xe>
			clr_bit(PORTC,0);		//first row check
 540:	a8 98       	cbi	0x15, 0	; 21
 542:	0d c0       	rjmp	.+26     	; 0x55e <key_scan+0x28>
			
		if ( cnt == 1 )
 544:	81 30       	cpi	r24, 0x01	; 1
 546:	11 f4       	brne	.+4      	; 0x54c <key_scan+0x16>
			clr_bit(PORTC,1);		//second row check
 548:	a9 98       	cbi	0x15, 1	; 21
 54a:	12 c0       	rjmp	.+36     	; 0x570 <key_scan+0x3a>
		
		if ( cnt == 2 )
 54c:	82 30       	cpi	r24, 0x02	; 2
 54e:	39 f4       	brne	.+14     	; 0x55e <key_scan+0x28>
			clr_bit(PORTC,2);		//third row check
 550:	aa 98       	cbi	0x15, 2	; 21
		
		if ( cnt == 3 )
			clr_bit(PORTC,3);		//fourth row check
		
		key = PINC & 0xF0;			//check if any key is pressed
 552:	93 b3       	in	r25, 0x13	; 19
 554:	90 7f       	andi	r25, 0xF0	; 240
		
		if ( key != 0xF0 )			//if any key pressed go to the second level
 556:	90 3f       	cpi	r25, 0xF0	; 240
 558:	09 f4       	brne	.+2      	; 0x55c <key_scan+0x26>
 55a:	7b c0       	rjmp	.+246    	; 0x652 <key_scan+0x11c>
 55c:	0d c0       	rjmp	.+26     	; 0x578 <key_scan+0x42>
			clr_bit(PORTC,1);		//second row check
		
		if ( cnt == 2 )
			clr_bit(PORTC,2);		//third row check
		
		if ( cnt == 3 )
 55e:	83 30       	cpi	r24, 0x03	; 3
 560:	39 f4       	brne	.+14     	; 0x570 <key_scan+0x3a>
			clr_bit(PORTC,3);		//fourth row check
 562:	ab 98       	cbi	0x15, 3	; 21
		
		key = PINC & 0xF0;			//check if any key is pressed
 564:	93 b3       	in	r25, 0x13	; 19
 566:	90 7f       	andi	r25, 0xF0	; 240
		
		if ( key != 0xF0 )			//if any key pressed go to the second level
 568:	90 3f       	cpi	r25, 0xF0	; 240
 56a:	09 f4       	brne	.+2      	; 0x56e <key_scan+0x38>
 56c:	74 c0       	rjmp	.+232    	; 0x656 <key_scan+0x120>
 56e:	04 c0       	rjmp	.+8      	; 0x578 <key_scan+0x42>
			clr_bit(PORTC,2);		//third row check
		
		if ( cnt == 3 )
			clr_bit(PORTC,3);		//fourth row check
		
		key = PINC & 0xF0;			//check if any key is pressed
 570:	93 b3       	in	r25, 0x13	; 19
 572:	90 7f       	andi	r25, 0xF0	; 240
		
		if ( key != 0xF0 )			//if any key pressed go to the second level
 574:	90 3f       	cpi	r25, 0xF0	; 240
 576:	29 f0       	breq	.+10     	; 0x582 <key_scan+0x4c>
		{
			while ( ( PINC & 0xF0 ) != 0xF0 );
 578:	23 b3       	in	r18, 0x13	; 19
 57a:	20 7f       	andi	r18, 0xF0	; 240
 57c:	20 3f       	cpi	r18, 0xF0	; 240
 57e:	e1 f7       	brne	.-8      	; 0x578 <key_scan+0x42>
 580:	04 c0       	rjmp	.+8      	; 0x58a <key_scan+0x54>
{
	unsigned char cnt, key;
	
	
	
	for ( cnt = 0 ; cnt < 4 ; ++cnt )
 582:	8f 5f       	subi	r24, 0xFF	; 255
 584:	84 30       	cpi	r24, 0x04	; 4
 586:	c9 f6       	brne	.-78     	; 0x53a <key_scan+0x4>
 588:	66 c0       	rjmp	.+204    	; 0x656 <key_scan+0x120>
			while ( ( PINC & 0xF0 ) != 0xF0 );
			break;
		}
	}
	
	if ( cnt == 4 )					//end of first level scan loop
 58a:	84 30       	cpi	r24, 0x04	; 4
 58c:	09 f4       	brne	.+2      	; 0x590 <key_scan+0x5a>
 58e:	55 c0       	rjmp	.+170    	; 0x63a <key_scan+0x104>
		return 0;
		
	switch ( cnt )					//scan columns
 590:	81 30       	cpi	r24, 0x01	; 1
 592:	d1 f0       	breq	.+52     	; 0x5c8 <key_scan+0x92>
 594:	28 f0       	brcs	.+10     	; 0x5a0 <key_scan+0x6a>
 596:	82 30       	cpi	r24, 0x02	; 2
 598:	51 f1       	breq	.+84     	; 0x5ee <key_scan+0xb8>
 59a:	83 30       	cpi	r24, 0x03	; 3
 59c:	d9 f1       	breq	.+118    	; 0x614 <key_scan+0xde>
 59e:	4f c0       	rjmp	.+158    	; 0x63e <key_scan+0x108>
	{
		case 0:						//case 0 for first row
			
			switch ( key )			
 5a0:	90 3b       	cpi	r25, 0xB0	; 176
 5a2:	71 f0       	breq	.+28     	; 0x5c0 <key_scan+0x8a>
 5a4:	18 f4       	brcc	.+6      	; 0x5ac <key_scan+0x76>
 5a6:	90 37       	cpi	r25, 0x70	; 112
 5a8:	69 f0       	breq	.+26     	; 0x5c4 <key_scan+0x8e>
 5aa:	08 c0       	rjmp	.+16     	; 0x5bc <key_scan+0x86>
 5ac:	90 3d       	cpi	r25, 0xD0	; 208
 5ae:	21 f0       	breq	.+8      	; 0x5b8 <key_scan+0x82>
 5b0:	90 3e       	cpi	r25, 0xE0	; 224
 5b2:	09 f4       	brne	.+2      	; 0x5b6 <key_scan+0x80>
 5b4:	46 c0       	rjmp	.+140    	; 0x642 <key_scan+0x10c>
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <key_scan+0x86>
					case 0xE0:		//Check if row 1 col 1 --> ( 7 )
					return 0x07;
					break;
					
					case 0xD0:		//Check if row 1 col 2 --> ( 8 )
					return 0x08;
 5b8:	88 e0       	ldi	r24, 0x08	; 8
 5ba:	08 95       	ret
					break;
			}
		break;
	}
	
	return 0;
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	08 95       	ret
					case 0xD0:		//Check if row 1 col 2 --> ( 8 )
					return 0x08;
					break;
					
					case 0xB0:		//Check if row 1 col 3 --> ( 9 )
					return 0x09;
 5c0:	89 e0       	ldi	r24, 0x09	; 9
 5c2:	08 95       	ret
					break;
					
					case 0x70:		//Check if row 1 col 4 --> ( A )
					return 0x0A;
 5c4:	8a e0       	ldi	r24, 0x0A	; 10
 5c6:	08 95       	ret
				}
		break;
		
		case 1:						//case 1 for second row
		
			switch ( key )
 5c8:	90 3b       	cpi	r25, 0xB0	; 176
 5ca:	69 f0       	breq	.+26     	; 0x5e6 <key_scan+0xb0>
 5cc:	18 f4       	brcc	.+6      	; 0x5d4 <key_scan+0x9e>
 5ce:	90 37       	cpi	r25, 0x70	; 112
 5d0:	61 f0       	breq	.+24     	; 0x5ea <key_scan+0xb4>
 5d2:	07 c0       	rjmp	.+14     	; 0x5e2 <key_scan+0xac>
 5d4:	90 3d       	cpi	r25, 0xD0	; 208
 5d6:	19 f0       	breq	.+6      	; 0x5de <key_scan+0xa8>
 5d8:	90 3e       	cpi	r25, 0xE0	; 224
 5da:	a9 f1       	breq	.+106    	; 0x646 <key_scan+0x110>
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <key_scan+0xac>
					case 0xE0:		//Check if row 2 col 1 --> ( 4 )
					return 0x04;
					break;
			
					case 0xD0:		//Check if row 2 col 2 --> ( 5 )
					return 0x05;
 5de:	85 e0       	ldi	r24, 0x05	; 5
 5e0:	08 95       	ret
					break;
			}
		break;
	}
	
	return 0;
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	08 95       	ret
					case 0xD0:		//Check if row 2 col 2 --> ( 5 )
					return 0x05;
					break;
			
					case 0xB0:		//Check if row 2 col 3 --> ( 6 )
					return 0x06;
 5e6:	86 e0       	ldi	r24, 0x06	; 6
 5e8:	08 95       	ret
					break;
			
					case 0x70:		//Check if row 2 col 4 --> ( B )
					return 0x0B;
 5ea:	8b e0       	ldi	r24, 0x0B	; 11
 5ec:	08 95       	ret
				}
		break;
		
		case 2:						//case 2 for third row
		
			switch ( key )
 5ee:	90 3b       	cpi	r25, 0xB0	; 176
 5f0:	69 f0       	breq	.+26     	; 0x60c <key_scan+0xd6>
 5f2:	18 f4       	brcc	.+6      	; 0x5fa <key_scan+0xc4>
 5f4:	90 37       	cpi	r25, 0x70	; 112
 5f6:	61 f0       	breq	.+24     	; 0x610 <key_scan+0xda>
 5f8:	07 c0       	rjmp	.+14     	; 0x608 <key_scan+0xd2>
 5fa:	90 3d       	cpi	r25, 0xD0	; 208
 5fc:	19 f0       	breq	.+6      	; 0x604 <key_scan+0xce>
 5fe:	90 3e       	cpi	r25, 0xE0	; 224
 600:	21 f1       	breq	.+72     	; 0x64a <key_scan+0x114>
 602:	02 c0       	rjmp	.+4      	; 0x608 <key_scan+0xd2>
					case 0xE0:		//Check if row 3 col 1 --> ( 1 )
					return 0x01;
					break;
			
					case 0xD0:		//Check if row 3 col 2 --> ( 2 )
					return 0x02;
 604:	82 e0       	ldi	r24, 0x02	; 2
 606:	08 95       	ret
					break;
			}
		break;
	}
	
	return 0;
 608:	80 e0       	ldi	r24, 0x00	; 0
 60a:	08 95       	ret
					case 0xD0:		//Check if row 3 col 2 --> ( 2 )
					return 0x02;
					break;
			
					case 0xB0:		//Check if row 3 col 3 --> ( 3 )
					return 0x03;
 60c:	83 e0       	ldi	r24, 0x03	; 3
 60e:	08 95       	ret
					break;
			
					case 0x70:		//Check if row 3 col 4 --> ( C )
					return 0x0C;
 610:	8c e0       	ldi	r24, 0x0C	; 12
 612:	08 95       	ret
				}
		break;
		
		case 3:						//case 3 for fourth row
		
			switch ( key )
 614:	90 3b       	cpi	r25, 0xB0	; 176
 616:	69 f0       	breq	.+26     	; 0x632 <key_scan+0xfc>
 618:	18 f4       	brcc	.+6      	; 0x620 <key_scan+0xea>
 61a:	90 37       	cpi	r25, 0x70	; 112
 61c:	61 f0       	breq	.+24     	; 0x636 <key_scan+0x100>
 61e:	07 c0       	rjmp	.+14     	; 0x62e <key_scan+0xf8>
 620:	90 3d       	cpi	r25, 0xD0	; 208
 622:	19 f0       	breq	.+6      	; 0x62a <key_scan+0xf4>
 624:	90 3e       	cpi	r25, 0xE0	; 224
 626:	99 f0       	breq	.+38     	; 0x64e <key_scan+0x118>
 628:	02 c0       	rjmp	.+4      	; 0x62e <key_scan+0xf8>
					case 0xE0:		//Check if row 4 col 1 --> ( F )
					return 0x0F;
					break;
					
					case 0xD0:		//Check if row 4 col 2 --> ( 0 )
					return '0';
 62a:	80 e3       	ldi	r24, 0x30	; 48
 62c:	08 95       	ret
					break;
			}
		break;
	}
	
	return 0;
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	08 95       	ret
					case 0xD0:		//Check if row 4 col 2 --> ( 0 )
					return '0';
					break;
					
					case 0xB0:		//Check if row 4 col 3 --> ( E )
					return 0x0E;
 632:	8e e0       	ldi	r24, 0x0E	; 14
 634:	08 95       	ret
					break;
					
					case 0x70:		//Check if row 4 col 4 --> ( D )
					return 0x0D;
 636:	8d e0       	ldi	r24, 0x0D	; 13
 638:	08 95       	ret
			break;
		}
	}
	
	if ( cnt == 4 )					//end of first level scan loop
		return 0;
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	08 95       	ret
					break;
			}
		break;
	}
	
	return 0;
 63e:	80 e0       	ldi	r24, 0x00	; 0
 640:	08 95       	ret
		case 0:						//case 0 for first row
			
			switch ( key )			
				{
					case 0xE0:		//Check if row 1 col 1 --> ( 7 )
					return 0x07;
 642:	87 e0       	ldi	r24, 0x07	; 7
 644:	08 95       	ret
		case 1:						//case 1 for second row
		
			switch ( key )
				{
					case 0xE0:		//Check if row 2 col 1 --> ( 4 )
					return 0x04;
 646:	84 e0       	ldi	r24, 0x04	; 4
 648:	08 95       	ret
		case 2:						//case 2 for third row
		
			switch ( key )
				{
					case 0xE0:		//Check if row 3 col 1 --> ( 1 )
					return 0x01;
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	08 95       	ret
		case 3:						//case 3 for fourth row
		
			switch ( key )
			{
					case 0xE0:		//Check if row 4 col 1 --> ( F )
					return 0x0F;
 64e:	8f e0       	ldi	r24, 0x0F	; 15
 650:	08 95       	ret
{
	unsigned char cnt, key;
	
	
	
	for ( cnt = 0 ; cnt < 4 ; ++cnt )
 652:	8f 5f       	subi	r24, 0xFF	; 255
 654:	72 cf       	rjmp	.-284    	; 0x53a <key_scan+0x4>
			break;
		}
	}
	
	if ( cnt == 4 )					//end of first level scan loop
		return 0;
 656:	80 e0       	ldi	r24, 0x00	; 0
			}
		break;
	}
	
	return 0;
}
 658:	08 95       	ret

0000065a <enable_ex_interrupt>:
	return;
}

void enable_ex_interrupt(void){

	MCUCR |= (1<<ISC10);
 65a:	85 b7       	in	r24, 0x35	; 53
 65c:	84 60       	ori	r24, 0x04	; 4
 65e:	85 bf       	out	0x35, r24	; 53
	GICR  |= (1<<INT1);
 660:	8b b7       	in	r24, 0x3b	; 59
 662:	80 68       	ori	r24, 0x80	; 128
 664:	8b bf       	out	0x3b, r24	; 59
 666:	08 95       	ret

00000668 <ultrasonic_init>:
	}
}

void ultrasonic_init(void){

	TRIGER_DDR|=(1<<TRIGER);
 668:	88 9a       	sbi	0x11, 0	; 17
	ECHO_DDR&=~(1<<ECHO);
 66a:	8b 98       	cbi	0x11, 3	; 17
	ECHO_PULLUP|=(1<<ECHO);
 66c:	93 9a       	sbi	0x12, 3	; 18
	enable_ex_interrupt();
 66e:	0e 94 2d 03 	call	0x65a	; 0x65a <enable_ex_interrupt>
	timer0_init();
 672:	0e 94 94 05 	call	0xb28	; 0xb28 <timer0_init>
 676:	08 95       	ret

00000678 <ultra_triger>:

	return;
}

void ultra_triger(void){
	if(!sensor_working){
 678:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <sensor_working>
 67c:	81 11       	cpse	r24, r1
 67e:	08 c0       	rjmp	.+16     	; 0x690 <ultra_triger+0x18>
		TRIGER_PORT|=(1<<TRIGER);
 680:	90 9a       	sbi	0x12, 0	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 682:	80 e5       	ldi	r24, 0x50	; 80
 684:	8a 95       	dec	r24
 686:	f1 f7       	brne	.-4      	; 0x684 <ultra_triger+0xc>
		_delay_us(15);
		TRIGER_PORT&=~(1<<TRIGER);
 688:	90 98       	cbi	0x12, 0	; 18
		sensor_working=1;
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <sensor_working>
 690:	08 95       	ret

00000692 <main>:

void lcddisplay(void);


int main(void)
{
 692:	cf 93       	push	r28
 694:	df 93       	push	r29
 696:	00 d0       	rcall	.+0      	; 0x698 <main+0x6>
 698:	00 d0       	rcall	.+0      	; 0x69a <main+0x8>
 69a:	cd b7       	in	r28, 0x3d	; 61
 69c:	de b7       	in	r29, 0x3e	; 62
	//DDRC = 0b11111111; //making PC0,PC1 and PC2 as output pins.
	DDRA =0xFF;// set LCD Data port as output
 69e:	8f ef       	ldi	r24, 0xFF	; 255
 6a0:	8a bb       	out	0x1a, r24	; 26
	
	DDRD =0xFF;
 6a2:	81 bb       	out	0x11, r24	; 17
	
	DDRB = 0xFF;  // Making Port B as output
 6a4:	87 bb       	out	0x17, r24	; 23
	PORTB = PORTB | (1<<valve_1); //Turn ON the valve 1
 6a6:	c3 9a       	sbi	0x18, 3	; 24
	PORTB = PORTB | (1<<valve_2); //Turn ON the valve 2
 6a8:	c5 9a       	sbi	0x18, 5	; 24

void key_init(void);						//initialize keypad

void key_init(void)
{
	DDRC = 0x0F;			//assign rows bits PA0-PA3 as outputs and columns bits PA4-PA7 as inputs
 6aa:	8f e0       	ldi	r24, 0x0F	; 15
 6ac:	84 bb       	out	0x14, r24	; 20
	int j,x,y;
	int reset1 = 0, reset2 = 0, reset3 = 0;
	unsigned char t[4];
	
	key_init();
	Lcd4_Init();
 6ae:	0e 94 12 02 	call	0x424	; 0x424 <Lcd4_Init>
	ultrasonic_init();
 6b2:	0e 94 34 03 	call	0x668	; 0x668 <ultrasonic_init>
	sei();
 6b6:	78 94       	sei
	
	
	ultra_triger();
 6b8:	0e 94 3c 03 	call	0x678	; 0x678 <ultra_triger>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6bc:	8f e5       	ldi	r24, 0x5F	; 95
 6be:	9a ee       	ldi	r25, 0xEA	; 234
 6c0:	01 97       	sbiw	r24, 0x01	; 1
 6c2:	f1 f7       	brne	.-4      	; 0x6c0 <main+0x2e>
 6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <main+0x34>
 6c6:	00 00       	nop
	DDRB = 0xFF;  // Making Port B as output
	PORTB = PORTB | (1<<valve_1); //Turn ON the valve 1
	PORTB = PORTB | (1<<valve_2); //Turn ON the valve 2
	
	int j,x,y;
	int reset1 = 0, reset2 = 0, reset3 = 0;
 6c8:	61 2c       	mov	r6, r1
 6ca:	71 2c       	mov	r7, r1
 6cc:	41 2c       	mov	r4, r1
 6ce:	51 2c       	mov	r5, r1
 6d0:	81 2c       	mov	r8, r1
 6d2:	91 2c       	mov	r9, r1
 6d4:	5e 01       	movw	r10, r28
 6d6:	94 e0       	ldi	r25, 0x04	; 4
 6d8:	a9 0e       	add	r10, r25
 6da:	b1 1c       	adc	r11, r1
			else if(t[y]==0x03 && reset1==1 && reset2==0){
				Lcd4_Set_Cursor(2,7);
				Lcd4_Write_String("Trouser");
				_delay_ms(200);
				reset3 = 1;
				reset1 = 0;
 6dc:	21 2c       	mov	r2, r1
 6de:	31 2c       	mov	r3, r1
 6e0:	fe 01       	movw	r30, r28
 6e2:	31 96       	adiw	r30, 0x01	; 1
 6e4:	6f 01       	movw	r12, r30
	DDRB = 0xFF;  // Making Port B as output
	PORTB = PORTB | (1<<valve_1); //Turn ON the valve 1
	PORTB = PORTB | (1<<valve_2); //Turn ON the valve 2
	
	int j,x,y;
	int reset1 = 0, reset2 = 0, reset3 = 0;
 6e6:	7f 01       	movw	r14, r30
 6e8:	19 c0       	rjmp	.+50     	; 0x71c <main+0x8a>
	
	while(1)
	{
		for(x=0;x<3;x++){
			for(j=0;j<20;j++){
				t[x]=key_scan();
 6ea:	0e 94 9b 02 	call	0x536	; 0x536 <key_scan>
 6ee:	f7 01       	movw	r30, r14
 6f0:	80 83       	st	Z, r24
				
				if(t[x]>0x00){
 6f2:	81 11       	cpse	r24, r1
 6f4:	0a c0       	rjmp	.+20     	; 0x70a <main+0x78>
 6f6:	8f e3       	ldi	r24, 0x3F	; 63
 6f8:	9c e9       	ldi	r25, 0x9C	; 156
 6fa:	01 97       	sbiw	r24, 0x01	; 1
 6fc:	f1 f7       	brne	.-4      	; 0x6fa <main+0x68>
 6fe:	00 c0       	rjmp	.+0      	; 0x700 <main+0x6e>
 700:	00 00       	nop
 702:	01 50       	subi	r16, 0x01	; 1
 704:	11 09       	sbc	r17, r1
	
	
	while(1)
	{
		for(x=0;x<3;x++){
			for(j=0;j<20;j++){
 706:	89 f7       	brne	.-30     	; 0x6ea <main+0x58>
 708:	0c c0       	rjmp	.+24     	; 0x722 <main+0x90>
 70a:	9f ef       	ldi	r25, 0xFF	; 255
 70c:	e9 1a       	sub	r14, r25
 70e:	f9 0a       	sbc	r15, r25
				if(t[x]>0x00){
					break;
				}
				_delay_ms(10);
			}
			if(t[x]==0 || t[x]>3){
 710:	81 50       	subi	r24, 0x01	; 1
 712:	83 30       	cpi	r24, 0x03	; 3
 714:	30 f4       	brcc	.+12     	; 0x722 <main+0x90>
	
	
	
	while(1)
	{
		for(x=0;x<3;x++){
 716:	ea 14       	cp	r14, r10
 718:	fb 04       	cpc	r15, r11
 71a:	19 f0       	breq	.+6      	; 0x722 <main+0x90>
	DDRB = 0xFF;  // Making Port B as output
	PORTB = PORTB | (1<<valve_1); //Turn ON the valve 1
	PORTB = PORTB | (1<<valve_2); //Turn ON the valve 2
	
	int j,x,y;
	int reset1 = 0, reset2 = 0, reset3 = 0;
 71c:	04 e1       	ldi	r16, 0x14	; 20
 71e:	10 e0       	ldi	r17, 0x00	; 0
 720:	e4 cf       	rjmp	.-56     	; 0x6ea <main+0x58>
			}
		}
		
		for(y=0;y<3;y++){
			
			if(t[y]==0x01){
 722:	f6 01       	movw	r30, r12
 724:	81 91       	ld	r24, Z+
 726:	6f 01       	movw	r12, r30
 728:	81 30       	cpi	r24, 0x01	; 1
 72a:	b9 f5       	brne	.+110    	; 0x79a <main+0x108>
 72c:	ff ef       	ldi	r31, 0xFF	; 255
 72e:	25 ea       	ldi	r18, 0xA5	; 165
 730:	3e e0       	ldi	r19, 0x0E	; 14
 732:	f1 50       	subi	r31, 0x01	; 1
 734:	20 40       	sbci	r18, 0x00	; 0
 736:	30 40       	sbci	r19, 0x00	; 0
 738:	e1 f7       	brne	.-8      	; 0x732 <main+0xa0>
 73a:	00 c0       	rjmp	.+0      	; 0x73c <main+0xaa>
 73c:	00 00       	nop
				_delay_ms(300);
				Lcd4_Set_Cursor(1,3);
 73e:	63 e0       	ldi	r22, 0x03	; 3
 740:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
				Lcd4_Write_String("Activating");
 744:	80 e6       	ldi	r24, 0x60	; 96
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	0e 94 8c 02 	call	0x518	; 0x518 <Lcd4_Write_String>
				Lcd4_Set_Cursor(2,1);
 74c:	61 e0       	ldi	r22, 0x01	; 1
 74e:	82 e0       	ldi	r24, 0x02	; 2
 750:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
				Lcd4_Write_String("Folding Process");
 754:	8b e6       	ldi	r24, 0x6B	; 107
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	0e 94 8c 02 	call	0x518	; 0x518 <Lcd4_Write_String>
 75c:	4f ef       	ldi	r20, 0xFF	; 255
 75e:	89 e6       	ldi	r24, 0x69	; 105
 760:	98 e1       	ldi	r25, 0x18	; 24
 762:	41 50       	subi	r20, 0x01	; 1
 764:	80 40       	sbci	r24, 0x00	; 0
 766:	90 40       	sbci	r25, 0x00	; 0
 768:	e1 f7       	brne	.-8      	; 0x762 <main+0xd0>
 76a:	00 c0       	rjmp	.+0      	; 0x76c <main+0xda>
 76c:	00 00       	nop
				_delay_ms(500);
				Lcd4_Clear();
 76e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
				Lcd4_Write_String("Input  Cloth");
 772:	8b e7       	ldi	r24, 0x7B	; 123
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	0e 94 8c 02 	call	0x518	; 0x518 <Lcd4_Write_String>
				Lcd4_Set_Cursor(2,0);
 77a:	60 e0       	ldi	r22, 0x00	; 0
 77c:	82 e0       	ldi	r24, 0x02	; 2
 77e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
				Lcd4_Write_String("Type: ");
 782:	88 e8       	ldi	r24, 0x88	; 136
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	0e 94 8c 02 	call	0x518	; 0x518 <Lcd4_Write_String>
				
				reset1 = 1;
				reset2 = 0;
				reset3 = 0;
 78a:	62 2c       	mov	r6, r2
 78c:	73 2c       	mov	r7, r3
				Lcd4_Write_String("Input  Cloth");
				Lcd4_Set_Cursor(2,0);
				Lcd4_Write_String("Type: ");
				
				reset1 = 1;
				reset2 = 0;
 78e:	42 2c       	mov	r4, r2
 790:	53 2c       	mov	r5, r3
				Lcd4_Clear();
				Lcd4_Write_String("Input  Cloth");
				Lcd4_Set_Cursor(2,0);
				Lcd4_Write_String("Type: ");
				
				reset1 = 1;
 792:	88 24       	eor	r8, r8
 794:	83 94       	inc	r8
 796:	91 2c       	mov	r9, r1
 798:	dd c0       	rjmp	.+442    	; 0x954 <__stack+0xf5>
				reset3 = 0;
				
				
			}
			
			else if(t[y]==0x02 && reset1==1 && reset3==0){
 79a:	82 30       	cpi	r24, 0x02	; 2
 79c:	09 f0       	breq	.+2      	; 0x7a0 <main+0x10e>
 79e:	65 c0       	rjmp	.+202    	; 0x86a <__stack+0xb>
 7a0:	e1 e0       	ldi	r30, 0x01	; 1
 7a2:	8e 16       	cp	r8, r30
 7a4:	91 04       	cpc	r9, r1
 7a6:	09 f0       	breq	.+2      	; 0x7aa <main+0x118>
 7a8:	d5 c0       	rjmp	.+426    	; 0x954 <__stack+0xf5>
 7aa:	61 14       	cp	r6, r1
 7ac:	71 04       	cpc	r7, r1
 7ae:	09 f0       	breq	.+2      	; 0x7b2 <main+0x120>
 7b0:	d1 c0       	rjmp	.+418    	; 0x954 <__stack+0xf5>
				Lcd4_Set_Cursor(2,7);
 7b2:	67 e0       	ldi	r22, 0x07	; 7
 7b4:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
				Lcd4_Write_String("T-Shirt");
 7b8:	8f e8       	ldi	r24, 0x8F	; 143
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	0e 94 8c 02 	call	0x518	; 0x518 <Lcd4_Write_String>
 7c0:	ff ef       	ldi	r31, 0xFF	; 255
 7c2:	23 ec       	ldi	r18, 0xC3	; 195
 7c4:	39 e0       	ldi	r19, 0x09	; 9
 7c6:	f1 50       	subi	r31, 0x01	; 1
 7c8:	20 40       	sbci	r18, 0x00	; 0
 7ca:	30 40       	sbci	r19, 0x00	; 0
 7cc:	e1 f7       	brne	.-8      	; 0x7c6 <main+0x134>
 7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <main+0x13e>
 7d0:	00 00       	nop
				_delay_ms(200);
				reset2 = 1;
				reset1 = 0;
				
				PORTD = PORTD | (1<<5);
 7d2:	95 9a       	sbi	0x12, 5	; 18
				for(int i=0;i<1;i++){
					PORTD = PORTD | (1<<3);
 7d4:	93 9a       	sbi	0x12, 3	; 18
 7d6:	4f ef       	ldi	r20, 0xFF	; 255
 7d8:	83 e2       	ldi	r24, 0x23	; 35
 7da:	94 ef       	ldi	r25, 0xF4	; 244
 7dc:	41 50       	subi	r20, 0x01	; 1
 7de:	80 40       	sbci	r24, 0x00	; 0
 7e0:	90 40       	sbci	r25, 0x00	; 0
 7e2:	e1 f7       	brne	.-8      	; 0x7dc <main+0x14a>
 7e4:	00 c0       	rjmp	.+0      	; 0x7e6 <main+0x154>
 7e6:	00 00       	nop
					_delay_ms(5000);
					PORTD = PORTD & (~(1<<3));
 7e8:	93 98       	cbi	0x12, 3	; 18
 7ea:	ef ef       	ldi	r30, 0xFF	; 255
 7ec:	f1 ee       	ldi	r31, 0xE1	; 225
 7ee:	24 e0       	ldi	r18, 0x04	; 4
 7f0:	e1 50       	subi	r30, 0x01	; 1
 7f2:	f0 40       	sbci	r31, 0x00	; 0
 7f4:	20 40       	sbci	r18, 0x00	; 0
 7f6:	e1 f7       	brne	.-8      	; 0x7f0 <main+0x15e>
 7f8:	00 c0       	rjmp	.+0      	; 0x7fa <main+0x168>
 7fa:	00 00       	nop
					_delay_ms(100);
					PORTD = PORTD | (1<<4);
 7fc:	94 9a       	sbi	0x12, 4	; 18
 7fe:	3f ef       	ldi	r19, 0xFF	; 255
 800:	43 e2       	ldi	r20, 0x23	; 35
 802:	84 ef       	ldi	r24, 0xF4	; 244
 804:	31 50       	subi	r19, 0x01	; 1
 806:	40 40       	sbci	r20, 0x00	; 0
 808:	80 40       	sbci	r24, 0x00	; 0
 80a:	e1 f7       	brne	.-8      	; 0x804 <main+0x172>
 80c:	00 c0       	rjmp	.+0      	; 0x80e <main+0x17c>
 80e:	00 00       	nop
					_delay_ms(5000);
					PORTD = PORTD & (~(1<<4));
 810:	94 98       	cbi	0x12, 4	; 18
					
				}
				PORTD = PORTD & (~(1<<5));
 812:	95 98       	cbi	0x12, 5	; 18
 814:	9f ef       	ldi	r25, 0xFF	; 255
 816:	eb e7       	ldi	r30, 0x7B	; 123
 818:	f2 e9       	ldi	r31, 0x92	; 146
 81a:	91 50       	subi	r25, 0x01	; 1
 81c:	e0 40       	sbci	r30, 0x00	; 0
 81e:	f0 40       	sbci	r31, 0x00	; 0
 820:	e1 f7       	brne	.-8      	; 0x81a <main+0x188>
 822:	00 c0       	rjmp	.+0      	; 0x824 <main+0x192>
 824:	00 00       	nop
				_delay_ms(3000);
				
				//starts motor
				PORTB = PORTB | (1<<0);
 826:	c0 9a       	sbi	0x18, 0	; 24
				PORTB = PORTB & (~(1<<1));
 828:	c1 98       	cbi	0x18, 1	; 24
				_delay_us(1000);
				PORTC = PORTC &(~(1<<2));
				_delay_ms(2000);
				*/
				//handling pneumatic cylinders
				PORTB = PORTB & (~(1<<valve_1)); //Turn OFF the Relay 1
 82a:	c3 98       	cbi	0x18, 3	; 24
				PORTB = PORTB & (~(1<<valve_2)); //Turn OFF the Relay 2
 82c:	c5 98       	cbi	0x18, 5	; 24
 82e:	2f ef       	ldi	r18, 0xFF	; 255
 830:	37 ea       	ldi	r19, 0xA7	; 167
 832:	41 e6       	ldi	r20, 0x61	; 97
 834:	21 50       	subi	r18, 0x01	; 1
 836:	30 40       	sbci	r19, 0x00	; 0
 838:	40 40       	sbci	r20, 0x00	; 0
 83a:	e1 f7       	brne	.-8      	; 0x834 <main+0x1a2>
 83c:	00 c0       	rjmp	.+0      	; 0x83e <main+0x1ac>
 83e:	00 00       	nop
				_delay_ms(2000);
				PORTB = PORTB | (1<<valve_1); //Turn ON the Relay 1
 840:	c3 9a       	sbi	0x18, 3	; 24
				PORTB = PORTB | (1<<valve_2); //Turn ON the Relay 2
 842:	c5 9a       	sbi	0x18, 5	; 24
 844:	8f ef       	ldi	r24, 0xFF	; 255
 846:	95 e3       	ldi	r25, 0x35	; 53
 848:	ee e6       	ldi	r30, 0x6E	; 110
 84a:	f1 e0       	ldi	r31, 0x01	; 1
 84c:	81 50       	subi	r24, 0x01	; 1
 84e:	90 40       	sbci	r25, 0x00	; 0
 850:	e0 40       	sbci	r30, 0x00	; 0
 852:	f0 40       	sbci	r31, 0x00	; 0
 854:	d9 f7       	brne	.-10     	; 0x84c <main+0x1ba>
 856:	00 c0       	rjmp	.+0      	; 0x858 <main+0x1c6>
 858:	00 00       	nop
				
				_delay_ms(9000);
				
				//Stops Motor
				PORTB = PORTB & (~(1<<0));
 85a:	c0 98       	cbi	0x18, 0	; 24
				PORTB = PORTB & (~(1<<1));
 85c:	c1 98       	cbi	0x18, 1	; 24
			
			else if(t[y]==0x02 && reset1==1 && reset3==0){
				Lcd4_Set_Cursor(2,7);
				Lcd4_Write_String("T-Shirt");
				_delay_ms(200);
				reset2 = 1;
 85e:	44 24       	eor	r4, r4
 860:	43 94       	inc	r4
 862:	51 2c       	mov	r5, r1
				reset1 = 0;
 864:	82 2c       	mov	r8, r2
 866:	93 2c       	mov	r9, r3
				
				_delay_ms(9000);
				
				//Stops Motor
				PORTB = PORTB & (~(1<<0));
				PORTB = PORTB & (~(1<<1));
 868:	75 c0       	rjmp	.+234    	; 0x954 <__stack+0xf5>
				
			}
			
			else if(t[y]==0x03 && reset1==1 && reset2==0){
 86a:	83 30       	cpi	r24, 0x03	; 3
 86c:	09 f0       	breq	.+2      	; 0x870 <__stack+0x11>
 86e:	72 c0       	rjmp	.+228    	; 0x954 <__stack+0xf5>
 870:	21 e0       	ldi	r18, 0x01	; 1
 872:	82 16       	cp	r8, r18
 874:	91 04       	cpc	r9, r1
 876:	09 f0       	breq	.+2      	; 0x87a <__stack+0x1b>
 878:	6d c0       	rjmp	.+218    	; 0x954 <__stack+0xf5>
 87a:	41 14       	cp	r4, r1
 87c:	51 04       	cpc	r5, r1
 87e:	09 f0       	breq	.+2      	; 0x882 <__stack+0x23>
 880:	69 c0       	rjmp	.+210    	; 0x954 <__stack+0xf5>
				Lcd4_Set_Cursor(2,7);
 882:	67 e0       	ldi	r22, 0x07	; 7
 884:	82 e0       	ldi	r24, 0x02	; 2
 886:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
				Lcd4_Write_String("Trouser");
 88a:	87 e9       	ldi	r24, 0x97	; 151
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	0e 94 8c 02 	call	0x518	; 0x518 <Lcd4_Write_String>
 892:	3f ef       	ldi	r19, 0xFF	; 255
 894:	43 ec       	ldi	r20, 0xC3	; 195
 896:	89 e0       	ldi	r24, 0x09	; 9
 898:	31 50       	subi	r19, 0x01	; 1
 89a:	40 40       	sbci	r20, 0x00	; 0
 89c:	80 40       	sbci	r24, 0x00	; 0
 89e:	e1 f7       	brne	.-8      	; 0x898 <__stack+0x39>
 8a0:	00 c0       	rjmp	.+0      	; 0x8a2 <__stack+0x43>
 8a2:	00 00       	nop
				_delay_ms(200);
				reset3 = 1;
				reset1 = 0;
				
				PORTD = PORTD | (1<<5);        // transmit status of pin PD1 on to pin PD3 to drive MOTOR.
 8a4:	95 9a       	sbi	0x12, 5	; 18
 8a6:	82 e0       	ldi	r24, 0x02	; 2
 8a8:	90 e0       	ldi	r25, 0x00	; 0
				for(int i=0;i<2;i++){
					PORTD = PORTD | (1<<3);
 8aa:	93 9a       	sbi	0x12, 3	; 18
 8ac:	ef ef       	ldi	r30, 0xFF	; 255
 8ae:	f3 e2       	ldi	r31, 0x23	; 35
 8b0:	24 ef       	ldi	r18, 0xF4	; 244
 8b2:	e1 50       	subi	r30, 0x01	; 1
 8b4:	f0 40       	sbci	r31, 0x00	; 0
 8b6:	20 40       	sbci	r18, 0x00	; 0
 8b8:	e1 f7       	brne	.-8      	; 0x8b2 <__stack+0x53>
 8ba:	00 c0       	rjmp	.+0      	; 0x8bc <__stack+0x5d>
 8bc:	00 00       	nop
					_delay_ms(5000);
					PORTD = PORTD & (~(1<<3));
 8be:	93 98       	cbi	0x12, 3	; 18
 8c0:	3f ef       	ldi	r19, 0xFF	; 255
 8c2:	41 ee       	ldi	r20, 0xE1	; 225
 8c4:	e4 e0       	ldi	r30, 0x04	; 4
 8c6:	31 50       	subi	r19, 0x01	; 1
 8c8:	40 40       	sbci	r20, 0x00	; 0
 8ca:	e0 40       	sbci	r30, 0x00	; 0
 8cc:	e1 f7       	brne	.-8      	; 0x8c6 <__stack+0x67>
 8ce:	00 c0       	rjmp	.+0      	; 0x8d0 <__stack+0x71>
 8d0:	00 00       	nop
					_delay_ms(100);
					PORTD = PORTD | (1<<4);
 8d2:	94 9a       	sbi	0x12, 4	; 18
 8d4:	ff ef       	ldi	r31, 0xFF	; 255
 8d6:	23 e2       	ldi	r18, 0x23	; 35
 8d8:	34 ef       	ldi	r19, 0xF4	; 244
 8da:	f1 50       	subi	r31, 0x01	; 1
 8dc:	20 40       	sbci	r18, 0x00	; 0
 8de:	30 40       	sbci	r19, 0x00	; 0
 8e0:	e1 f7       	brne	.-8      	; 0x8da <__stack+0x7b>
 8e2:	00 c0       	rjmp	.+0      	; 0x8e4 <__stack+0x85>
 8e4:	00 00       	nop
					_delay_ms(5000);
					PORTD = PORTD & (~(1<<4));
 8e6:	94 98       	cbi	0x12, 4	; 18
 8e8:	4f ef       	ldi	r20, 0xFF	; 255
 8ea:	e1 ee       	ldi	r30, 0xE1	; 225
 8ec:	f4 e0       	ldi	r31, 0x04	; 4
 8ee:	41 50       	subi	r20, 0x01	; 1
 8f0:	e0 40       	sbci	r30, 0x00	; 0
 8f2:	f0 40       	sbci	r31, 0x00	; 0
 8f4:	e1 f7       	brne	.-8      	; 0x8ee <__stack+0x8f>
 8f6:	00 c0       	rjmp	.+0      	; 0x8f8 <__stack+0x99>
 8f8:	00 00       	nop
 8fa:	01 97       	sbiw	r24, 0x01	; 1
				_delay_ms(200);
				reset3 = 1;
				reset1 = 0;
				
				PORTD = PORTD | (1<<5);        // transmit status of pin PD1 on to pin PD3 to drive MOTOR.
				for(int i=0;i<2;i++){
 8fc:	b1 f6       	brne	.-84     	; 0x8aa <__stack+0x4b>
					_delay_ms(5000);
					PORTD = PORTD & (~(1<<4));
					_delay_ms(100);
				}
				
				PORTD = PORTD & (~(1<<5));
 8fe:	95 98       	cbi	0x12, 5	; 18
 900:	2f ef       	ldi	r18, 0xFF	; 255
 902:	3b e7       	ldi	r19, 0x7B	; 123
 904:	42 e9       	ldi	r20, 0x92	; 146
 906:	21 50       	subi	r18, 0x01	; 1
 908:	30 40       	sbci	r19, 0x00	; 0
 90a:	40 40       	sbci	r20, 0x00	; 0
 90c:	e1 f7       	brne	.-8      	; 0x906 <__stack+0xa7>
 90e:	00 c0       	rjmp	.+0      	; 0x910 <__stack+0xb1>
 910:	00 00       	nop
				_delay_ms(3000);
				
				//starts motor
				PORTB = PORTB | (1<<0);
 912:	c0 9a       	sbi	0x18, 0	; 24
				PORTB = PORTB & (~(1<<1));
 914:	c1 98       	cbi	0x18, 1	; 24
				_delay_us(1000);
				PORTC = PORTC &(~(1<<2));
				_delay_ms(2000);
				*/
				//handling pneumatic cylinders
				PORTB = PORTB & (~(1<<valve_1)); //Turn OFF the Relay 1
 916:	c3 98       	cbi	0x18, 3	; 24
				PORTB = PORTB & (~(1<<valve_2)); //Turn OFF the Relay 2
 918:	c5 98       	cbi	0x18, 5	; 24
 91a:	8f ef       	ldi	r24, 0xFF	; 255
 91c:	97 ea       	ldi	r25, 0xA7	; 167
 91e:	e1 e6       	ldi	r30, 0x61	; 97
 920:	81 50       	subi	r24, 0x01	; 1
 922:	90 40       	sbci	r25, 0x00	; 0
 924:	e0 40       	sbci	r30, 0x00	; 0
 926:	e1 f7       	brne	.-8      	; 0x920 <__stack+0xc1>
 928:	00 c0       	rjmp	.+0      	; 0x92a <__stack+0xcb>
 92a:	00 00       	nop
				_delay_ms(2000);
				PORTB = PORTB | (1<<valve_1); //Turn ON the Relay 1
 92c:	c3 9a       	sbi	0x18, 3	; 24
				PORTB = PORTB | (1<<valve_2); //Turn ON the Relay 2
 92e:	c5 9a       	sbi	0x18, 5	; 24
 930:	ff ef       	ldi	r31, 0xFF	; 255
 932:	25 e3       	ldi	r18, 0x35	; 53
 934:	3e e6       	ldi	r19, 0x6E	; 110
 936:	41 e0       	ldi	r20, 0x01	; 1
 938:	f1 50       	subi	r31, 0x01	; 1
 93a:	20 40       	sbci	r18, 0x00	; 0
 93c:	30 40       	sbci	r19, 0x00	; 0
 93e:	40 40       	sbci	r20, 0x00	; 0
 940:	d9 f7       	brne	.-10     	; 0x938 <__stack+0xd9>
 942:	00 c0       	rjmp	.+0      	; 0x944 <__stack+0xe5>
 944:	00 00       	nop
				
				_delay_ms(9000);
				
				//Stops Motor
				PORTB = PORTB & (~(1<<0));
 946:	c0 98       	cbi	0x18, 0	; 24
				PORTB = PORTB & (~(1<<1));
 948:	c1 98       	cbi	0x18, 1	; 24
			
			else if(t[y]==0x03 && reset1==1 && reset2==0){
				Lcd4_Set_Cursor(2,7);
				Lcd4_Write_String("Trouser");
				_delay_ms(200);
				reset3 = 1;
 94a:	66 24       	eor	r6, r6
 94c:	63 94       	inc	r6
 94e:	71 2c       	mov	r7, r1
				reset1 = 0;
 950:	82 2c       	mov	r8, r2
 952:	93 2c       	mov	r9, r3
			if(t[x]==0 || t[x]>3){
				break;
			}
		}
		
		for(y=0;y<3;y++){
 954:	ca 14       	cp	r12, r10
 956:	db 04       	cpc	r13, r11
 958:	09 f0       	breq	.+2      	; 0x95c <__stack+0xfd>
 95a:	e3 ce       	rjmp	.-570    	; 0x722 <main+0x90>
 95c:	c1 ce       	rjmp	.-638    	; 0x6e0 <main+0x4e>

0000095e <__vector_2>:
		sensor_working=1;
	}
	return;
}

ISR(INT1_vect){
 95e:	1f 92       	push	r1
 960:	0f 92       	push	r0
 962:	0f b6       	in	r0, 0x3f	; 63
 964:	0f 92       	push	r0
 966:	11 24       	eor	r1, r1
 968:	2f 93       	push	r18
 96a:	3f 93       	push	r19
 96c:	4f 93       	push	r20
 96e:	5f 93       	push	r21
 970:	6f 93       	push	r22
 972:	7f 93       	push	r23
 974:	8f 93       	push	r24
 976:	9f 93       	push	r25
 978:	af 93       	push	r26
 97a:	bf 93       	push	r27
 97c:	ef 93       	push	r30
 97e:	ff 93       	push	r31
	if(sensor_working==1){
 980:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <sensor_working>
 984:	81 30       	cpi	r24, 0x01	; 1
 986:	09 f0       	breq	.+2      	; 0x98a <__vector_2+0x2c>
 988:	85 c0       	rjmp	.+266    	; 0xa94 <__vector_2+0x136>
		if(rising_edge==0){
 98a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <rising_edge>
 98e:	81 11       	cpse	r24, r1
 990:	0d c0       	rjmp	.+26     	; 0x9ac <__vector_2+0x4e>
			TCNT0=0x00;
 992:	12 be       	out	0x32, r1	; 50
			rising_edge=1;
 994:	81 e0       	ldi	r24, 0x01	; 1
 996:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <rising_edge>
			timer_counter=0;
 99a:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <__data_end>
 99e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__data_end+0x1>
 9a2:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__data_end+0x2>
 9a6:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__data_end+0x3>
 9aa:	74 c0       	rjmp	.+232    	; 0xa94 <__vector_2+0x136>
		}
		else{
			distance=(timer_counter*256+TCNT0)/466;
 9ac:	22 b7       	in	r18, 0x32	; 50
 9ae:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <__data_end>
 9b2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__data_end+0x1>
 9b6:	a0 91 ba 00 	lds	r26, 0x00BA	; 0x8000ba <__data_end+0x2>
 9ba:	b0 91 bb 00 	lds	r27, 0x00BB	; 0x8000bb <__data_end+0x3>
 9be:	ba 2f       	mov	r27, r26
 9c0:	a9 2f       	mov	r26, r25
 9c2:	98 2f       	mov	r25, r24
 9c4:	88 27       	eor	r24, r24
 9c6:	bc 01       	movw	r22, r24
 9c8:	cd 01       	movw	r24, r26
 9ca:	62 0f       	add	r22, r18
 9cc:	71 1d       	adc	r23, r1
 9ce:	81 1d       	adc	r24, r1
 9d0:	91 1d       	adc	r25, r1
 9d2:	22 ed       	ldi	r18, 0xD2	; 210
 9d4:	31 e0       	ldi	r19, 0x01	; 1
 9d6:	40 e0       	ldi	r20, 0x00	; 0
 9d8:	50 e0       	ldi	r21, 0x00	; 0
 9da:	0e 94 9c 05 	call	0xb38	; 0xb38 <__udivmodsi4>
 9de:	20 93 be 00 	sts	0x00BE, r18	; 0x8000be <distance>
 9e2:	30 93 bf 00 	sts	0x00BF, r19	; 0x8000bf <distance+0x1>
 9e6:	40 93 c0 00 	sts	0x00C0, r20	; 0x8000c0 <distance+0x2>
 9ea:	50 93 c1 00 	sts	0x00C1, r21	; 0x8000c1 <distance+0x3>
			Lcd4_Set_Cursor(1,0);
 9ee:	60 e0       	ldi	r22, 0x00	; 0
 9f0:	81 e0       	ldi	r24, 0x01	; 1
 9f2:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
			Lcd4_Clear();
 9f6:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
			if(distance>30)
 9fa:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <distance>
 9fe:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <distance+0x1>
 a02:	a0 91 c0 00 	lds	r26, 0x00C0	; 0x8000c0 <distance+0x2>
 a06:	b0 91 c1 00 	lds	r27, 0x00C1	; 0x8000c1 <distance+0x3>
 a0a:	4f 97       	sbiw	r24, 0x1f	; 31
 a0c:	a1 05       	cpc	r26, r1
 a0e:	b1 05       	cpc	r27, r1
 a10:	e0 f0       	brcs	.+56     	; 0xa4a <__vector_2+0xec>
			{
				Lcd4_Set_Cursor(1,1);
 a12:	61 e0       	ldi	r22, 0x01	; 1
 a14:	81 e0       	ldi	r24, 0x01	; 1
 a16:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
				Lcd4_Write_String(" Water Level is");
 a1a:	8f e9       	ldi	r24, 0x9F	; 159
 a1c:	90 e0       	ldi	r25, 0x00	; 0
 a1e:	0e 94 8c 02 	call	0x518	; 0x518 <Lcd4_Write_String>
				Lcd4_Set_Cursor(2,6);
 a22:	66 e0       	ldi	r22, 0x06	; 6
 a24:	82 e0       	ldi	r24, 0x02	; 2
 a26:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
				Lcd4_Write_String("Low");
 a2a:	8f ea       	ldi	r24, 0xAF	; 175
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	0e 94 8c 02 	call	0x518	; 0x518 <Lcd4_Write_String>
 a32:	2f ef       	ldi	r18, 0xFF	; 255
 a34:	89 e6       	ldi	r24, 0x69	; 105
 a36:	98 e1       	ldi	r25, 0x18	; 24
 a38:	21 50       	subi	r18, 0x01	; 1
 a3a:	80 40       	sbci	r24, 0x00	; 0
 a3c:	90 40       	sbci	r25, 0x00	; 0
 a3e:	e1 f7       	brne	.-8      	; 0xa38 <__vector_2+0xda>
 a40:	00 c0       	rjmp	.+0      	; 0xa42 <__vector_2+0xe4>
 a42:	00 00       	nop
				_delay_ms(500);
				Lcd4_Clear();
 a44:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
 a48:	1b c0       	rjmp	.+54     	; 0xa80 <__vector_2+0x122>
				
			}
			else
			{
				Lcd4_Set_Cursor(1,1);
 a4a:	61 e0       	ldi	r22, 0x01	; 1
 a4c:	81 e0       	ldi	r24, 0x01	; 1
 a4e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
				Lcd4_Write_String("Water Level is");
 a52:	80 ea       	ldi	r24, 0xA0	; 160
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	0e 94 8c 02 	call	0x518	; 0x518 <Lcd4_Write_String>
				Lcd4_Set_Cursor(2,6);
 a5a:	66 e0       	ldi	r22, 0x06	; 6
 a5c:	82 e0       	ldi	r24, 0x02	; 2
 a5e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
				Lcd4_Write_String("Good");
 a62:	83 eb       	ldi	r24, 0xB3	; 179
 a64:	90 e0       	ldi	r25, 0x00	; 0
 a66:	0e 94 8c 02 	call	0x518	; 0x518 <Lcd4_Write_String>
 a6a:	2f ef       	ldi	r18, 0xFF	; 255
 a6c:	89 e6       	ldi	r24, 0x69	; 105
 a6e:	98 e1       	ldi	r25, 0x18	; 24
 a70:	21 50       	subi	r18, 0x01	; 1
 a72:	80 40       	sbci	r24, 0x00	; 0
 a74:	90 40       	sbci	r25, 0x00	; 0
 a76:	e1 f7       	brne	.-8      	; 0xa70 <__vector_2+0x112>
 a78:	00 c0       	rjmp	.+0      	; 0xa7a <__vector_2+0x11c>
 a7a:	00 00       	nop
				_delay_ms(500);
				Lcd4_Clear();
 a7c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
				
			}
			timer_counter=0;
 a80:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <__data_end>
 a84:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__data_end+0x1>
 a88:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__data_end+0x2>
 a8c:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__data_end+0x3>
			rising_edge=0;
 a90:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <rising_edge>
		}
	}}
 a94:	ff 91       	pop	r31
 a96:	ef 91       	pop	r30
 a98:	bf 91       	pop	r27
 a9a:	af 91       	pop	r26
 a9c:	9f 91       	pop	r25
 a9e:	8f 91       	pop	r24
 aa0:	7f 91       	pop	r23
 aa2:	6f 91       	pop	r22
 aa4:	5f 91       	pop	r21
 aa6:	4f 91       	pop	r20
 aa8:	3f 91       	pop	r19
 aaa:	2f 91       	pop	r18
 aac:	0f 90       	pop	r0
 aae:	0f be       	out	0x3f, r0	; 63
 ab0:	0f 90       	pop	r0
 ab2:	1f 90       	pop	r1
 ab4:	18 95       	reti

00000ab6 <__vector_11>:

	ISR(TIMER0_OVF_vect){
 ab6:	1f 92       	push	r1
 ab8:	0f 92       	push	r0
 aba:	0f b6       	in	r0, 0x3f	; 63
 abc:	0f 92       	push	r0
 abe:	11 24       	eor	r1, r1
 ac0:	2f 93       	push	r18
 ac2:	8f 93       	push	r24
 ac4:	9f 93       	push	r25
 ac6:	af 93       	push	r26
 ac8:	bf 93       	push	r27
		timer_counter++;
 aca:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <__data_end>
 ace:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__data_end+0x1>
 ad2:	a0 91 ba 00 	lds	r26, 0x00BA	; 0x8000ba <__data_end+0x2>
 ad6:	b0 91 bb 00 	lds	r27, 0x00BB	; 0x8000bb <__data_end+0x3>
 ada:	01 96       	adiw	r24, 0x01	; 1
 adc:	a1 1d       	adc	r26, r1
 ade:	b1 1d       	adc	r27, r1
 ae0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__data_end>
 ae4:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <__data_end+0x1>
 ae8:	a0 93 ba 00 	sts	0x00BA, r26	; 0x8000ba <__data_end+0x2>
 aec:	b0 93 bb 00 	sts	0x00BB, r27	; 0x8000bb <__data_end+0x3>
		if(timer_counter >730){
 af0:	8b 3d       	cpi	r24, 0xDB	; 219
 af2:	92 40       	sbci	r25, 0x02	; 2
 af4:	a1 05       	cpc	r26, r1
 af6:	b1 05       	cpc	r27, r1
 af8:	68 f0       	brcs	.+26     	; 0xb14 <__vector_11+0x5e>
			TCNT0=0x00;
 afa:	12 be       	out	0x32, r1	; 50
			sensor_working=0;
 afc:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <sensor_working>
			rising_edge=0;
 b00:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <rising_edge>
			timer_counter=0;
 b04:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <__data_end>
 b08:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__data_end+0x1>
 b0c:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__data_end+0x2>
 b10:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__data_end+0x3>
		}
		return;
	}
 b14:	bf 91       	pop	r27
 b16:	af 91       	pop	r26
 b18:	9f 91       	pop	r25
 b1a:	8f 91       	pop	r24
 b1c:	2f 91       	pop	r18
 b1e:	0f 90       	pop	r0
 b20:	0f be       	out	0x3f, r0	; 63
 b22:	0f 90       	pop	r0
 b24:	1f 90       	pop	r1
 b26:	18 95       	reti

00000b28 <timer0_init>:
* Return Value: Nothing.
***********************************************************************/
void timer0_init(void)
{
	    	/* Disable Timer 0 */
	    	TCCR0 = DISABLE_MODULE_VALUE;
 b28:	13 be       	out	0x33, r1	; 51
	    	/* Setting pre scaler */
	    	TCCR0 = (PRESCLR1_VALUE);
 b2a:	81 e0       	ldi	r24, 0x01	; 1
 b2c:	83 bf       	out	0x33, r24	; 51
	    	/* Initializing the timer with zero */
	    	TCNT0 = ZER0_INITIALIZER;
 b2e:	12 be       	out	0x32, r1	; 50
				/* Timer overflow interrupt enable*/
				TIMSK |=(1<<TOIE0);
 b30:	89 b7       	in	r24, 0x39	; 57
 b32:	81 60       	ori	r24, 0x01	; 1
 b34:	89 bf       	out	0x39, r24	; 57
 b36:	08 95       	ret

00000b38 <__udivmodsi4>:
 b38:	a1 e2       	ldi	r26, 0x21	; 33
 b3a:	1a 2e       	mov	r1, r26
 b3c:	aa 1b       	sub	r26, r26
 b3e:	bb 1b       	sub	r27, r27
 b40:	fd 01       	movw	r30, r26
 b42:	0d c0       	rjmp	.+26     	; 0xb5e <__udivmodsi4_ep>

00000b44 <__udivmodsi4_loop>:
 b44:	aa 1f       	adc	r26, r26
 b46:	bb 1f       	adc	r27, r27
 b48:	ee 1f       	adc	r30, r30
 b4a:	ff 1f       	adc	r31, r31
 b4c:	a2 17       	cp	r26, r18
 b4e:	b3 07       	cpc	r27, r19
 b50:	e4 07       	cpc	r30, r20
 b52:	f5 07       	cpc	r31, r21
 b54:	20 f0       	brcs	.+8      	; 0xb5e <__udivmodsi4_ep>
 b56:	a2 1b       	sub	r26, r18
 b58:	b3 0b       	sbc	r27, r19
 b5a:	e4 0b       	sbc	r30, r20
 b5c:	f5 0b       	sbc	r31, r21

00000b5e <__udivmodsi4_ep>:
 b5e:	66 1f       	adc	r22, r22
 b60:	77 1f       	adc	r23, r23
 b62:	88 1f       	adc	r24, r24
 b64:	99 1f       	adc	r25, r25
 b66:	1a 94       	dec	r1
 b68:	69 f7       	brne	.-38     	; 0xb44 <__udivmodsi4_loop>
 b6a:	60 95       	com	r22
 b6c:	70 95       	com	r23
 b6e:	80 95       	com	r24
 b70:	90 95       	com	r25
 b72:	9b 01       	movw	r18, r22
 b74:	ac 01       	movw	r20, r24
 b76:	bd 01       	movw	r22, r26
 b78:	cf 01       	movw	r24, r30
 b7a:	08 95       	ret

00000b7c <_exit>:
 b7c:	f8 94       	cli

00000b7e <__stop_program>:
 b7e:	ff cf       	rjmp	.-2      	; 0xb7e <__stop_program>
